//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.239.
//
#pragma warning disable 1591

namespace AvukatProLib.LcControl
{
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckProductKeyCompletedEventHandler(object sender, CheckProductKeyCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckVersionCompletedEventHandler(object sender, CheckVersionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDownloadAddressByEuidCompletedEventHandler(object sender, GetDownloadAddressByEuidCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckProductKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        internal CheckProductKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        private object[] results;

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        internal CheckVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        private object[] results;

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDownloadAddressByEuidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        internal GetDownloadAddressByEuidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        private object[] results;

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "UPDATE_SOAP_API_NENCSoap", Namespace = "http://update.soap.avukatpro.com/")]
    public partial class UPDATE_SOAP_API_NENC : System.Web.Services.Protocols.SoapHttpClientProtocol
    {
        /// <remarks/>
        public UPDATE_SOAP_API_NENC()
        {
            this.Url = global::AvukatProLib.Properties.Settings.Default.AvukatProLib_LcControl_UPDATE_SOAP_API_NENC;
            if ((this.IsLocalFileSystemWebService(this.Url) == true))
            {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        private System.Threading.SendOrPostCallback CheckProductKeyOperationCompleted;

        private System.Threading.SendOrPostCallback CheckVersionOperationCompleted;

        private System.Threading.SendOrPostCallback GetDownloadAddressByEuidOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;

        /// <remarks/>
        public event CheckProductKeyCompletedEventHandler CheckProductKeyCompleted;

        /// <remarks/>
        public event CheckVersionCompletedEventHandler CheckVersionCompleted;

        /// <remarks/>
        public event GetDownloadAddressByEuidCompletedEventHandler GetDownloadAddressByEuidCompleted;

        public new string Url
        {
            get
            {
                return base.Url;
            }
            set
            {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true)
                            && (this.useDefaultCredentialsSetExplicitly == false))
                            && (this.IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get
            {
                return base.UseDefaultCredentials;
            }
            set
            {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://update.soap.avukatpro.com/CheckProductKey", RequestNamespace = "http://update.soap.avukatpro.com/", ResponseNamespace = "http://update.soap.avukatpro.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckProductKey(string productKey, string cmpId)
        {
            object[] results = this.Invoke("CheckProductKey", new object[] {
                        productKey,
                        cmpId});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CheckProductKeyAsync(string productKey, string cmpId)
        {
            this.CheckProductKeyAsync(productKey, cmpId, null);
        }

        /// <remarks/>
        public void CheckProductKeyAsync(string productKey, string cmpId, object userState)
        {
            if ((this.CheckProductKeyOperationCompleted == null))
            {
                this.CheckProductKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckProductKeyOperationCompleted);
            }
            this.InvokeAsync("CheckProductKey", new object[] {
                        productKey,
                        cmpId}, this.CheckProductKeyOperationCompleted, userState);
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://update.soap.avukatpro.com/CheckVersion", RequestNamespace = "http://update.soap.avukatpro.com/", ResponseNamespace = "http://update.soap.avukatpro.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckVersion(string version)
        {
            object[] results = this.Invoke("CheckVersion", new object[] {
                        version});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CheckVersionAsync(string version)
        {
            this.CheckVersionAsync(version, null);
        }

        /// <remarks/>
        public void CheckVersionAsync(string version, object userState)
        {
            if ((this.CheckVersionOperationCompleted == null))
            {
                this.CheckVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckVersionOperationCompleted);
            }
            this.InvokeAsync("CheckVersion", new object[] {
                        version}, this.CheckVersionOperationCompleted, userState);
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://update.soap.avukatpro.com/GetDownloadAddressByEuid", RequestNamespace = "http://update.soap.avukatpro.com/", ResponseNamespace = "http://update.soap.avukatpro.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDownloadAddressByEuid(System.Guid euId)
        {
            object[] results = this.Invoke("GetDownloadAddressByEuid", new object[] {
                        euId});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetDownloadAddressByEuidAsync(System.Guid euId)
        {
            this.GetDownloadAddressByEuidAsync(euId, null);
        }

        /// <remarks/>
        public void GetDownloadAddressByEuidAsync(System.Guid euId, object userState)
        {
            if ((this.GetDownloadAddressByEuidOperationCompleted == null))
            {
                this.GetDownloadAddressByEuidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDownloadAddressByEuidOperationCompleted);
            }
            this.InvokeAsync("GetDownloadAddressByEuid", new object[] {
                        euId}, this.GetDownloadAddressByEuidOperationCompleted, userState);
        }

        private bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null)
                        || (url == string.Empty)))
            {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024)
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }

        private void OnCheckProductKeyOperationCompleted(object arg)
        {
            if ((this.CheckProductKeyCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckProductKeyCompleted(this, new CheckProductKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        private void OnCheckVersionOperationCompleted(object arg)
        {
            if ((this.CheckVersionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckVersionCompleted(this, new CheckVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        private void OnGetDownloadAddressByEuidOperationCompleted(object arg)
        {
            if ((this.GetDownloadAddressByEuidCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDownloadAddressByEuidCompleted(this, new GetDownloadAddressByEuidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
}

#pragma warning restore 1591